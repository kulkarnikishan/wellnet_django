# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations
import django.contrib.auth.models
import smart_selects.db_fields
import datetime
import services.models
from django.conf import settings
import django.core.validators
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0006_require_contenttypes_0002'),
    ]

    operations = [
        migrations.CreateModel(
            name='BaseUser',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('password', models.CharField(verbose_name='password', max_length=128)),
                ('last_login', models.DateTimeField(verbose_name='last login', blank=True, null=True)),
                ('is_superuser', models.BooleanField(verbose_name='superuser status', default=False, help_text='Designates that this user has all permissions without explicitly assigning them.')),
                ('username', models.CharField(verbose_name='username', max_length=30, unique=True, help_text='Required. 30 characters or fewer. Letters, digits and @/./+/-/_ only.', validators=[django.core.validators.RegexValidator('^[\\w.@+-]+$', 'Enter a valid username. This value may contain only letters, numbers and @/./+/-/_ characters.', 'invalid')], error_messages={'unique': 'A user with that username already exists.'})),
                ('first_name', models.CharField(verbose_name='first name', max_length=30, blank=True)),
                ('last_name', models.CharField(verbose_name='last name', max_length=30, blank=True)),
                ('email', models.EmailField(verbose_name='email address', max_length=254, blank=True)),
                ('is_staff', models.BooleanField(verbose_name='staff status', default=False, help_text='Designates whether the user can log into this admin site.')),
                ('is_active', models.BooleanField(verbose_name='active', default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.')),
                ('date_joined', models.DateTimeField(verbose_name='date joined', default=django.utils.timezone.now)),
                ('phone_number', models.CharField(max_length=10)),
                ('force_password_change', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('gross_amount', models.DecimalField(verbose_name='Gross Amount', max_digits=30, decimal_places=2)),
                ('amount', models.DecimalField(verbose_name='Total Amount', max_digits=30, decimal_places=2)),
                ('SGST_amount', models.DecimalField(default=0, max_digits=30, decimal_places=2)),
                ('CGST_amount', models.DecimalField(default=0, max_digits=30, decimal_places=2)),
                ('IGST_amount', models.DecimalField(default=0, max_digits=30, decimal_places=2)),
                ('cheque_dd_number', models.CharField(verbose_name='Cheque/DD Number', max_length=15, blank=True, null=True)),
                ('purchase_order_number', models.CharField(verbose_name='Purchase Order Number', max_length=25, default=0)),
                ('cheque_dd_date', models.DateField(verbose_name='Date on Cheque/DD', blank=True, default=django.utils.timezone.now)),
                ('utr_number', models.CharField(verbose_name='UTR Number', max_length=30, blank=True, null=True)),
                ('transfer_date', models.DateField(verbose_name='Payment Date', blank=True, null=True, default=django.utils.timezone.now)),
                ('bank_name', models.CharField(max_length=255, blank=True, null=True)),
                ('bank_branch', models.CharField(max_length=255, blank=True, null=True)),
                ('realisation_date', models.DateField(verbose_name='Date of payment realisation', blank=True, null=True)),
                ('is_immediate', models.BooleanField(verbose_name='Immediate Delivery?', default=False)),
                ('is_IGST', models.BooleanField(verbose_name='IGST Format', default=False)),
                ('expected_delivery_date', models.DateField(verbose_name='Expected Delivery Date')),
                ('order_delivery_date', models.DateField(verbose_name='Order Dispatched Date', blank=True, null=True)),
                ('order_delivery_type', models.IntegerField(choices=[(1, 'Courier'), (2, 'Hand Deliver'), (3, 'Dealer Pickup')])),
                ('courier_company_name', models.CharField(max_length=255, blank=True, null=True)),
                ('pod_number', models.CharField(max_length=255, blank=True, null=True)),
                ('person_name', models.CharField(max_length=255, blank=True, null=True)),
                ('contact_number', models.CharField(max_length=10, blank=True, null=True, validators=[django.core.validators.MinLengthValidator(10)])),
                ('is_cancelled', models.BooleanField(verbose_name='Cancel this booking?', default=False)),
                ('cancel_reason', models.CharField(max_length=255, blank=True, null=True)),
                ('created_date', models.DateField(default=django.utils.timezone.now)),
                ('updated', models.DateField(default=django.utils.timezone.now)),
                ('send_receipt', models.BooleanField(default=False)),
                ('send_pod', models.BooleanField(verbose_name='Send Delivery Details', default=False)),
            ],
            options={
                'verbose_name': 'Invoice',
                'verbose_name_plural': 'Invoices',
            },
        ),
        migrations.CreateModel(
            name='BookingService',
            fields=[
                ('service_type', models.CharField(max_length=256)),
                ('firstname', models.CharField(max_length=256)),
                ('booking_service_id', models.CharField(primary_key=True, max_length=50, unique=True, serialize=False)),
                ('email', models.EmailField(max_length=254)),
                ('city', models.CharField(max_length=256)),
                ('dealer', models.CharField(max_length=50)),
                ('dealer_phone', models.CharField(max_length=256)),
                ('phone', models.CharField(max_length=10)),
                ('area', models.DecimalField(default=0, help_text='Area in SquareFeet', max_digits=10, decimal_places=4)),
                ('total_amount', models.DecimalField(default=0, max_digits=10, decimal_places=4)),
                ('address', models.TextField(blank=True, default='', help_text='Address')),
                ('landmark', models.CharField(max_length=256, blank=True, default='', help_text='Landmark')),
                ('dealer_address', models.TextField(default='', help_text='Address')),
                ('payment_option', models.CharField(max_length=256)),
                ('booking_date', models.DateTimeField(default=datetime.datetime(2020, 4, 23, 12, 10, 57, 506530))),
            ],
            options={
                'verbose_name': 'BookingService',
                'verbose_name_plural': 'BookingServices',
            },
        ),
        migrations.CreateModel(
            name='ChannelPartnerSegment',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('description', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name': 'Partner Segment',
                'verbose_name_plural': 'Partner Segments',
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
            options={
                'verbose_name': 'City',
                'verbose_name_plural': 'Cities',
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('gender', models.CharField(max_length=1, default='M', choices=[('M', 'Male'), ('F', 'Female')])),
                ('mobile_number', models.CharField(max_length=10, validators=[django.core.validators.MinLengthValidator(10), services.models.IntegerValidator()])),
                ('email', models.EmailField(max_length=254)),
                ('address', models.TextField(max_length=255, blank=True, default='')),
                ('pin_code', models.CharField(max_length=6, validators=[django.core.validators.MinLengthValidator(6), services.models.IntegerValidator()])),
            ],
        ),
        migrations.CreateModel(
            name='CustomerCategory',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('description', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='CustomerInvoice',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('company_name', models.CharField(verbose_name='Company Name', max_length=100, blank=True, null=True)),
                ('building_name', models.CharField(verbose_name='Building Name', max_length=50, blank=True, null=True)),
                ('pin_code', models.CharField(max_length=6, blank=True, null=True, validators=[django.core.validators.MinLengthValidator(6), services.models.IntegerValidator()])),
                ('vehicle_category', models.IntegerField(blank=True, null=True, choices=[(1, 'Hatchback'), (2, 'Sedan'), (3, 'SUV'), (4, 'Tempo Traveller'), (5, 'Bus')])),
                ('vehicle_name', models.CharField(verbose_name='Vehicle Name', max_length=30, blank=True, null=True)),
                ('vehicle_registration_no', models.CharField(verbose_name='Vehicle Registration Number', max_length=15, blank=True, null=True)),
                ('year_of_manufacture', models.IntegerField(blank=True, null=True, default=2014)),
                ('same_address_as_user', models.BooleanField(default=True)),
                ('address', models.CharField(max_length=255, blank=True, null=True)),
                ('gross_amount', models.DecimalField(verbose_name='Gross Amount', max_digits=30, decimal_places=2)),
                ('amount', models.DecimalField(verbose_name='Total Amount', max_digits=30, decimal_places=2)),
                ('service_tax', models.DecimalField(default=0, max_digits=30, decimal_places=2)),
                ('vat', models.DecimalField(verbose_name='VAT', default=0, max_digits=30, decimal_places=2)),
                ('cheque_dd_number', models.CharField(verbose_name='Cheque/DD Number', max_length=15, blank=True, null=True)),
                ('cheque_dd_date', models.DateField(verbose_name='Date on Cheque/DD', blank=True, null=True, default=django.utils.timezone.now)),
                ('utr_number', models.CharField(verbose_name='UTR Number', max_length=25, blank=True, null=True)),
                ('transfer_date', models.DateField(verbose_name='Payment Date', blank=True, null=True, default=django.utils.timezone.now)),
                ('bank_name', models.CharField(max_length=255, blank=True, null=True)),
                ('bank_branch', models.CharField(max_length=255, blank=True, null=True)),
                ('realisation_date', models.DateField(verbose_name='Date of payment realisation', blank=True, null=True)),
                ('payment_date', models.DateField(default=django.utils.timezone.now)),
                ('updated', models.DateField(default=django.utils.timezone.now)),
                ('created_date', models.DateField(default=django.utils.timezone.now)),
                ('send_receipt', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='CustomerProductQuantity',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('quantity', models.IntegerField(verbose_name='Serviced Area')),
                ('gross_amount', models.DecimalField(verbose_name='Total Amount Charged', max_digits=30, decimal_places=2)),
                ('amount', models.DecimalField(max_digits=10, decimal_places=2)),
                ('service_tax', models.DecimalField(default=0, max_digits=30, decimal_places=2)),
                ('vat', models.DecimalField(default=0, max_digits=30, decimal_places=2)),
                ('invoice', models.ForeignKey(to='services.CustomerInvoice')),
            ],
            options={
                'verbose_name': 'Customer Product',
                'verbose_name_plural': 'Customer Products',
            },
        ),
        migrations.CreateModel(
            name='Dealers',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('company', models.CharField(max_length=20)),
                ('authorised_person', models.CharField(max_length=20)),
                ('category', models.CharField(max_length=256)),
                ('service_area', models.CharField(max_length=20)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(max_length=256)),
                ('city', models.CharField(max_length=256)),
                ('area', models.CharField(max_length=256, default='')),
                ('address', models.TextField(max_length=256, default='')),
                ('map_link', models.CharField(max_length=256, default='', help_text='map link')),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Dealer',
                'verbose_name_plural': 'Dealers',
            },
        ),
        migrations.CreateModel(
            name='DealersType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('description', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name': 'DealersType',
                'verbose_name_plural': 'DealersTypes',
            },
        ),
        migrations.CreateModel(
            name='ExportXls',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('model_type', models.IntegerField(choices=[(1, 'Invoices'), (2, 'Pro-forma-Invoices'), (3, 'Inventory'), (4, 'Supplier'), (5, 'Field Employees Activity'), (6, 'Partners'), (7, 'Products')])),
                ('from_date', models.DateField(verbose_name='From Date', blank=True, null=True)),
                ('to_date', models.DateField(verbose_name='To Date', blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Export Xls Report',
                'verbose_name_plural': 'Export Xls Reports',
            },
        ),
        migrations.CreateModel(
            name='FieldEmployeesActivityReport',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('date', models.DateField()),
            ],
            options={
                'verbose_name': 'Field Employees Activity Report',
                'verbose_name_plural': 'Field Employees Activity Reports',
            },
        ),
        migrations.CreateModel(
            name='InventoryInvoice',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('delivery_date', models.DateField(default=django.utils.timezone.now)),
                ('security_deposite_amount', models.DecimalField(max_digits=30, decimal_places=2)),
                ('cheque_dd_number', models.CharField(verbose_name='Cheque/DD Number', max_length=15, blank=True, null=True)),
                ('cheque_dd_date', models.DateField(verbose_name='Date on Cheque/DD', blank=True, default=django.utils.timezone.now)),
                ('utr_number', models.CharField(verbose_name='UTR Number', max_length=30, blank=True, null=True)),
                ('transfer_date', models.DateField(verbose_name='Payment Date', blank=True, null=True, default=django.utils.timezone.now)),
                ('bank_name', models.CharField(max_length=255, blank=True, null=True)),
                ('bank_branch', models.CharField(max_length=255, blank=True, null=True)),
                ('realisation_date', models.DateField(verbose_name='Date of payment realisation', blank=True, null=True, default=django.utils.timezone.now)),
                ('settlement_amount', models.DecimalField(verbose_name='Retained Amount', blank=True, null=True, max_digits=30, decimal_places=2)),
                ('settlement_date', models.DateField(blank=True, null=True)),
                ('goods_sold', models.BooleanField(default=False)),
                ('difference_amount', models.DecimalField(verbose_name='Amount', blank=True, null=True, max_digits=30, decimal_places=2)),
                ('difference_cheque_dd_number', models.CharField(verbose_name='Cheque/DD Number', max_length=15, blank=True, null=True)),
                ('difference_cheque_dd_date', models.DateField(verbose_name='Date on Cheque/DD', blank=True, null=True)),
                ('difference_utr_number', models.CharField(verbose_name='UTR Number', max_length=30, blank=True, null=True)),
                ('difference_transfer_date', models.DateField(verbose_name='Payment Date', blank=True, null=True)),
                ('difference_bank_name', models.CharField(verbose_name='Bank Name', max_length=255, blank=True, null=True)),
                ('difference_bank_branch', models.CharField(verbose_name='Branch Name', max_length=255, blank=True, null=True)),
                ('difference_realisation_date', models.DateField(verbose_name='Date of payment realisation', blank=True, null=True)),
                ('goods_price', models.DecimalField(blank=True, null=True, max_digits=30, decimal_places=2)),
                ('send_receipt', models.BooleanField(default=False)),
                ('created_date', models.DateField(default=django.utils.timezone.now)),
                ('updated', models.DateField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='InventoryManagement',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('packaging_number', models.CharField(max_length=256)),
                ('size', models.CharField(verbose_name='Size', max_length=256)),
                ('date_of_receipt', models.DateField(blank=True, null=True)),
                ('expiry_date', models.DateField(default=datetime.date(2023, 4, 23))),
                ('dispatch_date', models.DateField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Inventory',
                'verbose_name_plural': 'Inventory Management',
            },
        ),
        migrations.CreateModel(
            name='Lead',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('customer_name', models.CharField(max_length=100)),
                ('company_name', models.CharField(max_length=255)),
                ('mobile_number', models.CharField(max_length=10, validators=[django.core.validators.MinLengthValidator(10), services.models.IntegerValidator()])),
                ('landline_number', models.CharField(max_length=11, validators=[django.core.validators.MinLengthValidator(10), services.models.IntegerValidator()])),
                ('address', models.CharField(max_length=255, blank=True)),
                ('pin_code', models.CharField(max_length=6, validators=[django.core.validators.MinLengthValidator(6), services.models.IntegerValidator()])),
                ('call_source', models.IntegerField(choices=[(1, 'Database'), (2, 'Reference Lead'), (3, 'Cold Calling'), (4, 'Website')])),
                ('product_demo', models.CharField(max_length=1, default='N', choices=[('Y', 'Yes'), ('N', 'No')])),
                ('next_appointment', models.DateTimeField(verbose_name='Next Appointment On', blank=True, null=True)),
                ('comments', models.TextField(blank=True)),
                ('registration_form', models.CharField(max_length=1, default='N', choices=[('Y', 'Yes'), ('N', 'No')])),
                ('payment_collected', models.CharField(max_length=1, default='N', choices=[('Y', 'Yes'), ('N', 'No')])),
                ('goods_delivered', models.CharField(max_length=1, default='N', choices=[('Y', 'Yes'), ('N', 'No')])),
                ('cheque_dd_number', models.CharField(verbose_name='Cheque/DD Number', max_length=15, blank=True, null=True)),
                ('created_date', models.DateField(verbose_name='Date', default=django.utils.timezone.now)),
                ('updated', models.DateField(verbose_name='Updated', default=django.utils.timezone.now)),
                ('city', models.ForeignKey(to='services.City')),
            ],
        ),
        migrations.CreateModel(
            name='LeadStatus',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('description', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name': 'Lead Status',
                'verbose_name_plural': 'Lead Statuses',
            },
        ),
        migrations.CreateModel(
            name='Machine',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('machine_number', models.CharField(max_length=255, unique=True)),
                ('year_of_manufacture', models.CharField(max_length=4, validators=[django.core.validators.MinLengthValidator(4), services.models.IntegerValidator()])),
                ('manufacturer_company', models.CharField(max_length=100)),
                ('warranty_start_date', models.DateField()),
                ('warranty_end_date', models.DateField()),
                ('is_assigned', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='MoreInfo',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('info', models.IntegerField(choices=[(1, 'Product Demo'), (2, 'Product info'), (3, 'Company info'), (4, 'Pricing'), (5, 'Competitors info')])),
            ],
        ),
        migrations.CreateModel(
            name='PartnerAsOwner',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('name', models.CharField(max_length=255)),
                ('date_of_birth', models.DateField(default=django.utils.timezone.now)),
                ('gender', models.CharField(max_length=1, default='M', choices=[('M', 'Male'), ('F', 'Female')])),
                ('landline', models.CharField(max_length=11, validators=[django.core.validators.MinLengthValidator(10), services.models.IntegerValidator()])),
                ('mobile_number', models.CharField(max_length=10, validators=[django.core.validators.MinLengthValidator(10), services.models.IntegerValidator()])),
                ('address', models.CharField(max_length=255)),
                ('email', models.EmailField(max_length=255)),
            ],
            options={
                'verbose_name': 'Owner',
                'verbose_name_plural': 'Owner',
            },
        ),
        migrations.CreateModel(
            name='PartnerBranch',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('branch_address', models.CharField(max_length=255)),
                ('pin_code', models.CharField(max_length=6, validators=[django.core.validators.MinLengthValidator(6), services.models.IntegerValidator()])),
                ('landline', models.CharField(max_length=11, validators=[django.core.validators.MinLengthValidator(10), services.models.IntegerValidator()])),
                ('authorized_person_name', models.CharField(verbose_name='Name', max_length=255)),
                ('authorized_person_gender', models.CharField(verbose_name='Gender', max_length=1, default='M', choices=[('M', 'Male'), ('F', 'Female')])),
                ('authorized_person_landline', models.CharField(verbose_name='Landline', max_length=11, validators=[django.core.validators.MinLengthValidator(10), services.models.IntegerValidator()])),
                ('authorized_person_date_of_birth', models.DateField(verbose_name='Date of birth', default=django.utils.timezone.now)),
                ('authorized_person_mobile_number', models.CharField(verbose_name='Mobile Number', max_length=10, validators=[django.core.validators.MinLengthValidator(10), services.models.IntegerValidator()])),
                ('authorized_person_address', models.CharField(verbose_name='Address', max_length=255)),
                ('authorized_person_email', models.EmailField(verbose_name='Email', max_length=255)),
                ('same_as_owner', models.BooleanField(default=False)),
                ('city', models.ForeignKey(default='Bengaluru', to='services.City')),
            ],
            options={
                'verbose_name': 'Dealership/Branch',
                'verbose_name_plural': 'Dealerships/Branches',
            },
        ),
        migrations.CreateModel(
            name='PaymentType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('description', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('description', models.CharField(max_length=100)),
                ('type', models.IntegerField(choices=[(1, 'Product'), (2, 'Service')])),
                ('HSN_code', models.CharField(max_length=256)),
                ('active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='ProductPrice',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('base_price', models.DecimalField(max_digits=10, decimal_places=2)),
                ('active', models.BooleanField(default=True)),
                ('product', models.ForeignKey(to='services.Product')),
                ('user_group', models.ForeignKey(blank=True, null=True, to='auth.Group')),
            ],
            options={
                'verbose_name': 'Partner Product Price',
                'verbose_name_plural': 'Partner Product Prices',
            },
        ),
        migrations.CreateModel(
            name='ProductQuantity',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('quantity', models.IntegerField()),
                ('gross_amount', models.DecimalField(verbose_name='Gross Amount', max_digits=30, decimal_places=2)),
                ('amount', models.DecimalField(default=0, max_digits=10, decimal_places=2)),
                ('amount_igst', models.DecimalField(default=0, max_digits=10, decimal_places=2)),
                ('SGST_amount', models.DecimalField(default=0, max_digits=30, decimal_places=2)),
                ('CGST_amount', models.DecimalField(default=0, max_digits=30, decimal_places=2)),
                ('IGST_amount', models.DecimalField(default=0, max_digits=30, decimal_places=2)),
                ('SGST_percentage', models.DecimalField(default=0, max_digits=4, decimal_places=2)),
                ('CGST_percentage', models.DecimalField(default=0, max_digits=4, decimal_places=2)),
                ('IGST_percentage', models.DecimalField(default=0, max_digits=4, decimal_places=2)),
                ('base_price', models.DecimalField(max_digits=10, decimal_places=2)),
                ('booking', models.ForeignKey(to='services.Booking')),
                ('product', models.ForeignKey(to='services.Product')),
            ],
            options={
                'verbose_name': 'Partner Product',
                'verbose_name_plural': 'Partner Products',
            },
        ),
        migrations.CreateModel(
            name='ProductQuantityUnitDisplay',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('unit', models.IntegerField(choices=[(1, 'none'), (2, 'sq ft'), (3, 'cubic ft')])),
                ('product', models.ForeignKey(to='services.Product')),
            ],
        ),
        migrations.CreateModel(
            name='ProductSegmentPrice',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('vehicle_category', models.IntegerField(blank=True, null=True, choices=[(1, 'Hatchback'), (2, 'Sedan'), (3, 'SUV'), (4, 'Tempo Traveller'), (5, 'Bus')])),
                ('base_price', models.DecimalField(max_digits=10, decimal_places=2)),
                ('active', models.BooleanField(default=True)),
                ('product', models.ForeignKey(to='services.Product')),
                ('segment', models.ForeignKey(blank=True, null=True, to='services.CustomerCategory')),
            ],
            options={
                'verbose_name': 'Customer Product Price',
                'verbose_name_plural': 'Customer Product Prices',
            },
        ),
        migrations.CreateModel(
            name='ProFormaBooking',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('gross_amount', models.DecimalField(verbose_name='Gross Amount', max_digits=30, decimal_places=2)),
                ('amount', models.DecimalField(verbose_name='Total Amount', max_digits=30, decimal_places=2)),
                ('SGST_amount', models.DecimalField(max_digits=30, decimal_places=2)),
                ('CGST_amount', models.DecimalField(max_digits=30, decimal_places=2)),
                ('IGST_amount', models.DecimalField(max_digits=30, decimal_places=2)),
                ('is_IGST', models.BooleanField(verbose_name='IGST Format', default=False)),
                ('is_cancelled', models.BooleanField(verbose_name='Cancel this booking?', default=False)),
                ('cancel_reason', models.CharField(max_length=255, blank=True, null=True)),
                ('contact_number', models.CharField(max_length=10, blank=True, null=True, validators=[django.core.validators.MinLengthValidator(10)])),
                ('created_date', models.DateField(default=django.utils.timezone.now)),
                ('updated', models.DateField(default=django.utils.timezone.now)),
            ],
            options={
                'verbose_name': 'Pro-Forma Invoice',
                'verbose_name_plural': 'Pro-Forma Invoices',
            },
        ),
        migrations.CreateModel(
            name='ProFormaProductQuantity',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('quantity', models.IntegerField()),
                ('gross_amount', models.DecimalField(verbose_name='Gross Amount', max_digits=30, decimal_places=2)),
                ('amount', models.DecimalField(max_digits=10, decimal_places=2)),
                ('amount_igst', models.DecimalField(max_digits=10, decimal_places=2)),
                ('SGST_amount', models.DecimalField(default=0, max_digits=30, decimal_places=2)),
                ('CGST_amount', models.DecimalField(default=0, max_digits=30, decimal_places=2)),
                ('IGST_amount', models.DecimalField(default=0, max_digits=30, decimal_places=2)),
                ('SGST_percentage', models.DecimalField(max_digits=4, decimal_places=2)),
                ('CGST_percentage', models.DecimalField(max_digits=4, decimal_places=2)),
                ('IGST_percentage', models.DecimalField(max_digits=4, decimal_places=2)),
                ('base_price', models.DecimalField(max_digits=10, decimal_places=2)),
                ('booking', models.ForeignKey(to='services.ProFormaBooking')),
                ('product', models.ForeignKey(to='services.Product')),
            ],
            options={
                'verbose_name': 'ProForm Partner Product',
                'verbose_name_plural': 'ProForm Partner Products',
            },
        ),
        migrations.CreateModel(
            name='Reports',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('time_from', models.TimeField(help_text='Time-Format should be HH:mm:ss(24 hour format ex: 13:13:10)')),
                ('time_to', models.TimeField(help_text='Time-Format should be HH:mm:ss (24 hour format ex: 13:13:10)')),
                ('company', models.CharField(max_length=256)),
                ('name', models.CharField(max_length=256)),
                ('designation', models.CharField(max_length=256)),
                ('contact_number', models.CharField(max_length=10, validators=[django.core.validators.MinLengthValidator(10)])),
                ('discussion_point', models.TextField(max_length=512)),
                ('city', smart_selects.db_fields.ChainedForeignKey(to='services.City')),
                ('field_emp', models.ForeignKey(to='services.FieldEmployeesActivityReport')),
            ],
            options={
                'verbose_name': 'Report',
                'verbose_name_plural': 'Reports',
            },
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='StatusReason',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('description', models.CharField(max_length=100)),
                ('status', models.ForeignKey(to='services.LeadStatus')),
            ],
            options={
                'verbose_name': 'Status Reason',
                'verbose_name_plural': 'Status Reasons',
            },
        ),
        migrations.CreateModel(
            name='SupplierManagement',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('company_name', models.CharField(max_length=256)),
                ('company_name_for_invoice', models.CharField(max_length=256)),
                ('company_address', models.TextField(max_length=256)),
                ('country', models.CharField(max_length=256)),
                ('pin_code', models.CharField(max_length=6, validators=[django.core.validators.MinLengthValidator(6), services.models.IntegerValidator()])),
                ('phone_no', models.CharField(max_length=12)),
                ('authorised_person', models.CharField(max_length=256)),
                ('email_id', models.EmailField(max_length=254)),
                ('mobile_no', models.CharField(max_length=10, validators=[django.core.validators.MinLengthValidator(10)])),
                ('agreement_date', models.DateTimeField()),
                ('agreed_products', models.ForeignKey(max_length=256, to='services.Product')),
                ('city', smart_selects.db_fields.ChainedForeignKey(to='services.City', chained_field='state', chained_model_field='state', auto_choose=True)),
                ('state', models.ForeignKey(to='services.State')),
            ],
            options={
                'verbose_name': 'Supplier',
                'verbose_name_plural': 'Supplier Management',
            },
        ),
        migrations.CreateModel(
            name='Tax',
            fields=[
                ('id', models.AutoField(verbose_name='ID', primary_key=True, serialize=False, auto_created=True)),
                ('SGST_percentage', models.DecimalField(default=0, max_digits=4, decimal_places=2)),
                ('CGST_percentage', models.DecimalField(default=0, max_digits=4, decimal_places=2)),
                ('IGST_percentage', models.DecimalField(default=0, max_digits=4, decimal_places=2)),
                ('active', models.BooleanField(default=True)),
                ('end_date', models.DateField(default=django.utils.timezone.now)),
                ('product', models.ForeignKey(to='services.Product')),
            ],
            options={
                'verbose_name': 'Tax',
                'verbose_name_plural': 'Taxes',
            },
        ),
        migrations.CreateModel(
            name='ChannelPartner',
            fields=[
                ('baseuser_ptr', models.OneToOneField(primary_key=True, serialize=False, auto_created=True, parent_link=True, to=settings.AUTH_USER_MODEL)),
                ('company_name', models.CharField(max_length=255)),
                ('dealer_code', models.CharField(max_length=255, default=0)),
                ('company_name_invoice', models.CharField(verbose_name='Company Name For Invoice', max_length=255, default='wellnet')),
                ('hire_date', models.DateField(default=django.utils.timezone.now)),
                ('company_address', models.CharField(max_length=255)),
                ('number_of_staff', models.IntegerField(default=1)),
                ('number_of_branches', models.IntegerField(default=1)),
                ('number_of_products', models.IntegerField(default=1)),
                ('year_of_establishment', models.IntegerField(default=2020, choices=[(1950, 1950), (1951, 1951), (1952, 1952), (1953, 1953), (1954, 1954), (1955, 1955), (1956, 1956), (1957, 1957), (1958, 1958), (1959, 1959), (1960, 1960), (1961, 1961), (1962, 1962), (1963, 1963), (1964, 1964), (1965, 1965), (1966, 1966), (1967, 1967), (1968, 1968), (1969, 1969), (1970, 1970), (1971, 1971), (1972, 1972), (1973, 1973), (1974, 1974), (1975, 1975), (1976, 1976), (1977, 1977), (1978, 1978), (1979, 1979), (1980, 1980), (1981, 1981), (1982, 1982), (1983, 1983), (1984, 1984), (1985, 1985), (1986, 1986), (1987, 1987), (1988, 1988), (1989, 1989), (1990, 1990), (1991, 1991), (1992, 1992), (1993, 1993), (1994, 1994), (1995, 1995), (1996, 1996), (1997, 1997), (1998, 1998), (1999, 1999), (2000, 2000), (2001, 2001), (2002, 2002), (2003, 2003), (2004, 2004), (2005, 2005), (2006, 2006), (2007, 2007), (2008, 2008), (2009, 2009), (2010, 2010), (2011, 2011), (2012, 2012), (2013, 2013), (2014, 2014), (2015, 2015), (2016, 2016), (2017, 2017), (2018, 2018), (2019, 2019), (2020, 2020)])),
                ('pin_code', models.CharField(max_length=6, validators=[django.core.validators.MinLengthValidator(6), services.models.IntegerValidator()])),
                ('master_dealership', models.CharField(verbose_name='MasterDealership', max_length=255, blank=True, null=True, default='Retails')),
                ('landline', models.CharField(max_length=11, validators=[django.core.validators.MinLengthValidator(10), services.models.IntegerValidator()])),
                ('GSTIN', models.CharField(max_length=255)),
                ('parts_department_name', models.CharField(verbose_name='Name', max_length=255, blank=True, null=True)),
                ('parts_department_phone', models.CharField(verbose_name='Phone', max_length=10, blank=True, null=True, validators=[django.core.validators.MinLengthValidator(10), services.models.IntegerValidator()])),
                ('parts_department_email', models.EmailField(verbose_name='Email', max_length=254, blank=True, null=True)),
                ('finance_department_name', models.CharField(verbose_name='Name', max_length=255, blank=True, null=True)),
                ('finance_department_phone', models.CharField(verbose_name='Phone', max_length=10, blank=True, null=True, validators=[django.core.validators.MinLengthValidator(10), services.models.IntegerValidator()])),
                ('finance_department_email', models.EmailField(verbose_name='Email', max_length=254, blank=True, null=True)),
                ('company_pan_number', models.CharField(max_length=10, validators=[django.core.validators.MinLengthValidator(10)])),
                ('is_sub_dealer', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Partner',
                'verbose_name_plural': 'Partners',
            },
            bases=('services.baseuser',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('baseuser_ptr', models.OneToOneField(primary_key=True, serialize=False, auto_created=True, parent_link=True, to=settings.AUTH_USER_MODEL)),
                ('name', models.CharField(max_length=255)),
                ('current_address', models.CharField(max_length=255)),
                ('permanent_address', models.CharField(max_length=255)),
                ('pan_number', models.CharField(max_length=10)),
                ('aadhar_number', models.CharField(max_length=12)),
                ('date_of_birth', models.DateField()),
                ('hire_date', models.DateField(default=django.utils.timezone.now)),
                ('date_of_resignation', models.DateField(blank=True)),
                ('reason_for_resignation', models.CharField(max_length=555, blank=True)),
                ('emergency_contact_name', models.CharField(verbose_name='Name', max_length=255)),
                ('emergency_contact_phone', models.CharField(verbose_name='Mobile Number', max_length=10, validators=[django.core.validators.MinLengthValidator(10), services.models.IntegerValidator()])),
                ('emergency_contact_relation', models.CharField(verbose_name='Relation', max_length=30)),
                ('is_admin', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Employee',
                'verbose_name_plural': 'Employees',
            },
            bases=('services.baseuser',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='reports',
            name='state',
            field=models.ForeignKey(to='services.State'),
        ),
        migrations.AddField(
            model_name='proformabooking',
            name='createdBy',
            field=models.ForeignKey(to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='proformabooking',
            name='updated_By',
            field=models.ForeignKey(related_name='updated_By', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='partnerbranch',
            name='state',
            field=models.ForeignKey(to='services.State'),
        ),
        migrations.AddField(
            model_name='lead',
            name='createdBy',
            field=models.ForeignKey(related_name='leadCreatedBy', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='lead',
            name='more_details',
            field=models.ManyToManyField(blank=True, to='services.MoreInfo'),
        ),
        migrations.AddField(
            model_name='lead',
            name='reason',
            field=models.ForeignKey(blank=True, null=True, to='services.StatusReason'),
        ),
        migrations.AddField(
            model_name='lead',
            name='segments',
            field=models.ManyToManyField(to='services.ChannelPartnerSegment'),
        ),
        migrations.AddField(
            model_name='lead',
            name='status',
            field=models.ForeignKey(to='services.LeadStatus'),
        ),
        migrations.AddField(
            model_name='lead',
            name='updatedBy',
            field=models.ForeignKey(related_name='leadUpdatedBy', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='inventorymanagement',
            name='product_name',
            field=models.ForeignKey(to='services.Product'),
        ),
        migrations.AddField(
            model_name='inventoryinvoice',
            name='difference_payment_type',
            field=models.ForeignKey(blank=True, null=True, related_name='diff_payment', to='services.PaymentType'),
        ),
        migrations.AddField(
            model_name='inventoryinvoice',
            name='machine',
            field=models.ForeignKey(to='services.Machine'),
        ),
        migrations.AddField(
            model_name='inventoryinvoice',
            name='payment_type',
            field=models.ForeignKey(to='services.PaymentType'),
        ),
        migrations.AddField(
            model_name='fieldemployeesactivityreport',
            name='createdBy',
            field=models.ForeignKey(to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='customerproductquantity',
            name='product',
            field=models.ForeignKey(to='services.Product'),
        ),
        migrations.AddField(
            model_name='customerinvoice',
            name='createdBy',
            field=models.ForeignKey(related_name='customerCreatedBy', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='customerinvoice',
            name='partner_segment',
            field=models.ForeignKey(verbose_name='Previous service provided', to='services.ChannelPartnerSegment'),
        ),
        migrations.AddField(
            model_name='customerinvoice',
            name='payment_type',
            field=models.ForeignKey(default=4, to='services.PaymentType'),
        ),
        migrations.AddField(
            model_name='customerinvoice',
            name='segment',
            field=models.ForeignKey(verbose_name='Customer Category', blank=True, null=True, to='services.CustomerCategory'),
        ),
        migrations.AddField(
            model_name='customerinvoice',
            name='updatedBy',
            field=models.ForeignKey(related_name='customerUpdatedBy', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='customerinvoice',
            name='user',
            field=models.ForeignKey(to='services.Customer'),
        ),
        migrations.AddField(
            model_name='city',
            name='state',
            field=models.ForeignKey(to='services.State'),
        ),
        migrations.AddField(
            model_name='booking',
            name='createdBy',
            field=models.ForeignKey(to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='booking',
            name='payment_type',
            field=models.ForeignKey(to='services.PaymentType'),
        ),
        migrations.AddField(
            model_name='booking',
            name='updatedBy',
            field=models.ForeignKey(related_name='updatedBy', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='baseuser',
            name='groups',
            field=models.ManyToManyField(verbose_name='groups', blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group'),
        ),
        migrations.AddField(
            model_name='baseuser',
            name='user_permissions',
            field=models.ManyToManyField(verbose_name='user permissions', blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission'),
        ),
        migrations.AddField(
            model_name='proformabooking',
            name='created_For',
            field=models.ForeignKey(related_name='created_For', to='services.ChannelPartner'),
        ),
        migrations.AddField(
            model_name='partnerbranch',
            name='partner',
            field=models.ForeignKey(to='services.ChannelPartner'),
        ),
        migrations.AddField(
            model_name='partnerasowner',
            name='partner',
            field=models.ForeignKey(to='services.ChannelPartner'),
        ),
        migrations.AddField(
            model_name='lead',
            name='channelpartner',
            field=models.ForeignKey(verbose_name='Partner', blank=True, null=True, to='services.ChannelPartner'),
        ),
        migrations.AddField(
            model_name='inventorymanagement',
            name='current_ownership',
            field=models.ForeignKey(to='services.ChannelPartner'),
        ),
        migrations.AddField(
            model_name='inventoryinvoice',
            name='createdBy',
            field=models.ForeignKey(related_name='invCreatedBy', to='services.Employee'),
        ),
        migrations.AddField(
            model_name='inventoryinvoice',
            name='partner',
            field=models.ForeignKey(to='services.ChannelPartner'),
        ),
        migrations.AddField(
            model_name='inventoryinvoice',
            name='updatedBy',
            field=models.ForeignKey(related_name='invUpdatedBy', to='services.Employee'),
        ),
        migrations.AddField(
            model_name='employee',
            name='createdBy',
            field=models.ForeignKey(related_name='createdByUser', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='customer',
            name='createdBy',
            field=models.ForeignKey(default='BaseUser', to='services.ChannelPartner'),
        ),
        migrations.AddField(
            model_name='channelpartner',
            name='city',
            field=models.ForeignKey(default='Bengaluru', to='services.City'),
        ),
        migrations.AddField(
            model_name='channelpartner',
            name='createdBy',
            field=models.ForeignKey(related_name='cpCreatedByUser', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='channelpartner',
            name='dealership_category',
            field=models.ForeignKey(default=4, to='services.DealersType'),
        ),
        migrations.AddField(
            model_name='channelpartner',
            name='manager',
            field=models.ForeignKey(related_name='managerEmployee', to='services.Employee'),
        ),
        migrations.AddField(
            model_name='channelpartner',
            name='segments',
            field=models.ManyToManyField(to='services.ChannelPartnerSegment'),
        ),
        migrations.AddField(
            model_name='channelpartner',
            name='state',
            field=models.ForeignKey(to='services.State'),
        ),
        migrations.AddField(
            model_name='booking',
            name='createdFor',
            field=models.ForeignKey(related_name='createdFor', to='services.ChannelPartner'),
        ),
    ]
