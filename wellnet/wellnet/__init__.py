# -*- coding: utf-8 -*-
from __future__ import unicode_literals

import django.contrib.auth.models
import django.core.validators
import django.utils.timezone
import services.models
from django.conf import settings
from django.db import models, migrations


class Migration(migrations.Migration):
    dependencies = [
        ('auth', '0006_require_contenttypes_0002'),
    ]

    operations = [
        migrations.CreateModel(
            name='BaseUser',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(null=True, verbose_name='last login', blank=True)),
                ('is_superuser', models.BooleanField(default=False,
                                                     help_text='Designates that this user has all permissions without explicitly assigning them.',
                                                     verbose_name='superuser status')),
                ('username',
                 models.CharField(error_messages={'unique': 'A user with that username already exists.'}, max_length=30,
                                  validators=[django.core.validators.RegexValidator('^[\\w.@+-]+$',
                                                                                    'Enter a valid username. This value may contain only letters, numbers and @/./+/-/_ characters.',
                                                                                    'invalid')],
                                  help_text='Required. 30 characters or fewer. Letters, digits and @/./+/-/_ only.',
                                  unique=True, verbose_name='username')),
                ('first_name', models.CharField(max_length=30, verbose_name='first name', blank=True)),
                ('last_name', models.CharField(max_length=30, verbose_name='last name', blank=True)),
                ('email', models.EmailField(max_length=254, verbose_name='email address', blank=True)),
                ('is_staff', models.BooleanField(default=False,
                                                 help_text='Designates whether the user can log into this admin site.',
                                                 verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True,
                                                  help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.',
                                                  verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone_number', models.CharField(max_length=10)),
                ('force_password_change', models.BooleanField(default=True)),
            ],
            options={
                'abstract': False,
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                (b'objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('gross_amount', models.DecimalField(verbose_name=b'Gross Amount', max_digits=30, decimal_places=2)),
                ('amount', models.DecimalField(verbose_name=b'Total Amount', max_digits=30, decimal_places=2)),
                ('service_tax', models.DecimalField(max_digits=30, decimal_places=2)),
                ('vat', models.DecimalField(verbose_name=b'VAT', max_digits=30, decimal_places=2)),
                ('cheque_dd_number',
                 models.CharField(max_length=15, null=True, verbose_name=b'Cheque/DD Number', blank=True)),
                ('cheque_dd_date',
                 models.DateField(default=django.utils.timezone.now, verbose_name=b'Date on Cheque/DD', blank=True)),
                ('utr_number', models.CharField(max_length=30, null=True, verbose_name=b'UTR Number', blank=True)),
                ('transfer_date',
                 models.DateField(default=django.utils.timezone.now, null=True, verbose_name=b'Payment Date',
                                  blank=True)),
                ('bank_name', models.CharField(max_length=255, null=True, blank=True)),
                ('bank_branch', models.CharField(max_length=255, null=True, blank=True)),
                ('realisation_date',
                 models.DateField(null=True, verbose_name=b'Date of payment realisation', blank=True)),
                ('is_immediate', models.BooleanField(default=False, verbose_name=b'Immediate Delivery?')),
                ('expected_delivery_date', models.DateField(verbose_name=b'Expected Delivery Date')),
                ('order_delivery_date', models.DateField(null=True, verbose_name=b'Order Delivery Date', blank=True)),
                ('order_delivery_type',
                 models.IntegerField(choices=[(1, b'Courier'), (2, b'Hand Deliver'), (3, b'Dealer Pickup')])),
                ('courier_company_name', models.CharField(max_length=255, null=True, blank=True)),
                ('pod_number', models.CharField(max_length=255, null=True, blank=True)),
                ('person_name', models.CharField(max_length=255, null=True, blank=True)),
                ('contact_number', models.CharField(blank=True, max_length=10, null=True,
                                                    validators=[django.core.validators.MinLengthValidator(10)])),
                ('is_cancelled', models.BooleanField(default=False, verbose_name=b'Cancel this booking?')),
                ('cancel_reason', models.CharField(max_length=255, null=True, blank=True)),
                ('created_date', models.DateField(default=django.utils.timezone.now)),
                ('updated', models.DateField(default=django.utils.timezone.now)),
                ('send_receipt', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='ChannelPartnerSegment',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('description', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name': 'Partner Segment',
                'verbose_name_plural': 'Partner Segments',
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(max_length=100)),
                ('gender', models.CharField(default=b'M', max_length=1, choices=[(b'M', b'Male'), (b'F', b'Female')])),
                ('mobile_number', models.CharField(max_length=10,
                                                   validators=[django.core.validators.MinLengthValidator(10),
                                                               services.models.IntegerValidator()])),
                ('email', models.EmailField(max_length=254)),
                ('address', models.TextField(default=b'', max_length=255, editable=False, blank=True)),
                ('pin_code', models.CharField(max_length=6, validators=[django.core.validators.MinLengthValidator(6),
                                                                        services.models.IntegerValidator()])),
            ],
        ),
        migrations.CreateModel(
            name='CustomerCategory',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('description', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='CustomerInvoice',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('company_name', models.CharField(max_length=100, null=True, verbose_name=b'Company Name', blank=True)),
                (
                'building_name', models.CharField(max_length=50, null=True, verbose_name=b'Building Name', blank=True)),
                ('pin_code', models.CharField(blank=True, max_length=6, null=True,
                                              validators=[django.core.validators.MinLengthValidator(6),
                                                          services.models.IntegerValidator()])),
                ('vehicle_category', models.IntegerField(blank=True, null=True,
                                                         choices=[(1, b'Hatchback'), (2, b'Sedan'), (3, b'SUV'),
                                                                  (4, b'Tempo Traveller'), (5, b'Bus')])),
                ('vehicle_name', models.CharField(max_length=30, null=True, verbose_name=b'Vehicle Name', blank=True)),
                ('vehicle_registration_no',
                 models.CharField(max_length=15, null=True, verbose_name=b'Vehicle Registration Number', blank=True)),
                ('year_of_manufacture', models.IntegerField(default=2014, null=True, blank=True)),
                ('same_address_as_user', models.BooleanField(default=True)),
                ('address', models.CharField(max_length=255, null=True, blank=True)),
                ('gross_amount', models.DecimalField(verbose_name=b'Gross Amount', max_digits=30, decimal_places=2)),
                ('amount', models.DecimalField(verbose_name=b'Total Amount', max_digits=30, decimal_places=2)),
                ('service_tax', models.DecimalField(default=0, max_digits=30, decimal_places=2)),
                ('vat', models.DecimalField(default=0, verbose_name=b'VAT', max_digits=30, decimal_places=2)),
                ('cheque_dd_number',
                 models.CharField(max_length=15, null=True, verbose_name=b'Cheque/DD Number', blank=True)),
                ('cheque_dd_date',
                 models.DateField(default=django.utils.timezone.now, null=True, verbose_name=b'Date on Cheque/DD',
                                  blank=True)),
                ('utr_number', models.CharField(max_length=30, null=True, verbose_name=b'UTR Number', blank=True)),
                ('transfer_date',
                 models.DateField(default=django.utils.timezone.now, null=True, verbose_name=b'Payment Date',
                                  blank=True)),
                ('bank_name', models.CharField(max_length=255, null=True, blank=True)),
                ('bank_branch', models.CharField(max_length=255, null=True, blank=True)),
                ('realisation_date',
                 models.DateField(null=True, verbose_name=b'Date of payment realisation', blank=True)),
                ('payment_date', models.DateField(default=django.utils.timezone.now)),
                ('updated', models.DateField(default=django.utils.timezone.now)),
                ('created_date', models.DateField(default=django.utils.timezone.now)),
                ('send_receipt', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='CustomerProductQuantity',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('quantity', models.IntegerField(verbose_name=b'Serviced Area')),
                ('gross_amount',
                 models.DecimalField(verbose_name=b'Total Amount Charged', max_digits=30, decimal_places=2)),
                ('amount', models.DecimalField(max_digits=10, decimal_places=2)),
                ('service_tax', models.DecimalField(default=0, max_digits=30, decimal_places=2)),
                ('vat', models.DecimalField(default=0, max_digits=30, decimal_places=2)),
                ('invoice', models.ForeignKey(to='services.CustomerInvoice')),
            ],
            options={
                'verbose_name': 'Customer Product',
                'verbose_name_plural': 'Customer Products',
            },
        ),
        migrations.CreateModel(
            name='InventoryInvoice',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('delivery_date', models.DateField(default=django.utils.timezone.now)),
                ('security_deposite_amount', models.DecimalField(max_digits=30, decimal_places=2)),
                ('cheque_dd_number',
                 models.CharField(max_length=15, null=True, verbose_name=b'Cheque/DD Number', blank=True)),
                ('cheque_dd_date',
                 models.DateField(default=django.utils.timezone.now, verbose_name=b'Date on Cheque/DD', blank=True)),
                ('utr_number', models.CharField(max_length=30, null=True, verbose_name=b'UTR Number', blank=True)),
                ('transfer_date',
                 models.DateField(default=django.utils.timezone.now, null=True, verbose_name=b'Payment Date',
                                  blank=True)),
                ('bank_name', models.CharField(max_length=255, null=True, blank=True)),
                ('bank_branch', models.CharField(max_length=255, null=True, blank=True)),
                ('realisation_date', models.DateField(default=django.utils.timezone.now, null=True,
                                                      verbose_name=b'Date of payment realisation', blank=True)),
                ('settlement_amount',
                 models.DecimalField(null=True, verbose_name=b'Retained Amount', max_digits=30, decimal_places=2,
                                     blank=True)),
                ('settlement_date', models.DateField(null=True, blank=True)),
                ('goods_sold', models.BooleanField(default=False)),
                ('difference_amount',
                 models.DecimalField(null=True, verbose_name=b'Amount', max_digits=30, decimal_places=2, blank=True)),
                ('difference_cheque_dd_number',
                 models.CharField(max_length=15, null=True, verbose_name=b'Cheque/DD Number', blank=True)),
                ('difference_cheque_dd_date',
                 models.DateField(null=True, verbose_name=b'Date on Cheque/DD', blank=True)),
                ('difference_utr_number',
                 models.CharField(max_length=30, null=True, verbose_name=b'UTR Number', blank=True)),
                ('difference_transfer_date', models.DateField(null=True, verbose_name=b'Payment Date', blank=True)),
                ('difference_bank_name',
                 models.CharField(max_length=255, null=True, verbose_name=b'Bank Name', blank=True)),
                ('difference_bank_branch',
                 models.CharField(max_length=255, null=True, verbose_name=b'Branch Name', blank=True)),
                ('difference_realisation_date',
                 models.DateField(null=True, verbose_name=b'Date of payment realisation', blank=True)),
                ('goods_price', models.DecimalField(null=True, max_digits=30, decimal_places=2, blank=True)),
                ('send_receipt', models.BooleanField(default=False)),
                ('created_date', models.DateField(default=django.utils.timezone.now)),
                ('updated', models.DateField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='Lead',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('customer_name', models.CharField(max_length=100)),
                ('company_name', models.CharField(max_length=255)),
                ('mobile_number', models.CharField(max_length=10,
                                                   validators=[django.core.validators.MinLengthValidator(10),
                                                               services.models.IntegerValidator()])),
                ('landline_number', models.CharField(max_length=11,
                                                     validators=[django.core.validators.MinLengthValidator(10),
                                                                 services.models.IntegerValidator()])),
                ('address', models.CharField(max_length=255, blank=True)),
                ('pin_code', models.CharField(max_length=6, validators=[django.core.validators.MinLengthValidator(6),
                                                                        services.models.IntegerValidator()])),
                ('call_source', models.IntegerField(
                    choices=[(1, b'Database'), (2, b'Reference Lead'), (3, b'Cold Calling'), (4, b'Website')])),
                ('product_demo', models.CharField(default=b'N', max_length=1, choices=[(b'Y', b'Yes'), (b'N', b'No')])),
                ('next_appointment', models.DateTimeField(null=True, verbose_name=b'Next Appointment On', blank=True)),
                ('comments', models.TextField(blank=True)),
                ('registration_form',
                 models.CharField(default=b'N', max_length=1, choices=[(b'Y', b'Yes'), (b'N', b'No')])),
                ('payment_collected',
                 models.CharField(default=b'N', max_length=1, choices=[(b'Y', b'Yes'), (b'N', b'No')])),
                ('goods_delivered',
                 models.CharField(default=b'N', max_length=1, choices=[(b'Y', b'Yes'), (b'N', b'No')])),
                ('cheque_dd_number',
                 models.CharField(max_length=15, null=True, verbose_name=b'Cheque/DD Number', blank=True)),
                ('created_date', models.DateField(default=django.utils.timezone.now, verbose_name=b'Date')),
                ('updated', models.DateField(default=django.utils.timezone.now, verbose_name=b'Updated')),
                ('city', models.ForeignKey(to='services.City')),
            ],
        ),
        migrations.CreateModel(
            name='LeadStatus',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('description', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name': 'Lead Status',
                'verbose_name_plural': 'Lead Statuses',
            },
        ),
        migrations.CreateModel(
            name='Machine',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('machine_number', models.CharField(unique=True, max_length=255)),
                ('year_of_manufacture', models.CharField(max_length=4,
                                                         validators=[django.core.validators.MinLengthValidator(4),
                                                                     services.models.IntegerValidator()])),
                ('manufacturer_company', models.CharField(max_length=100)),
                ('warranty_start_date', models.DateField()),
                ('warranty_end_date', models.DateField()),
                ('is_assigned', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='MoreInfo',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('info', models.IntegerField(
                    choices=[(1, b'Product Demo'), (2, b'Product info'), (3, b'Company info'), (4, b'Pricing'),
                             (5, b'Competitors info')])),
            ],
        ),
        migrations.CreateModel(
            name='PartnerAsOwner',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=255)),
                ('gender', models.CharField(default=b'M', max_length=1, choices=[(b'M', b'Male'), (b'F', b'Female')])),
                ('landline', models.CharField(max_length=11, validators=[django.core.validators.MinLengthValidator(10),
                                                                         services.models.IntegerValidator()])),
                ('mobile_number', models.CharField(max_length=10,
                                                   validators=[django.core.validators.MinLengthValidator(10),
                                                               services.models.IntegerValidator()])),
                ('address', models.CharField(max_length=255)),
                ('email', models.EmailField(max_length=255)),
            ],
            options={
                'verbose_name': 'Owner',
                'verbose_name_plural': 'Owner',
            },
        ),
        migrations.CreateModel(
            name='PartnerBranch',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('branch_address', models.CharField(max_length=255)),
                ('pin_code', models.CharField(max_length=6, validators=[django.core.validators.MinLengthValidator(6),
                                                                        services.models.IntegerValidator()])),
                ('landline', models.CharField(max_length=11, validators=[django.core.validators.MinLengthValidator(10),
                                                                         services.models.IntegerValidator()])),
                ('authorized_person_name', models.CharField(max_length=255, verbose_name=b'Name')),
                ('authorized_person_gender', models.CharField(default=b'M', max_length=1, verbose_name=b'Gender',
                                                              choices=[(b'M', b'Male'), (b'F', b'Female')])),
                ('authorized_person_landline', models.CharField(max_length=11, verbose_name=b'Landline', validators=[
                    django.core.validators.MinLengthValidator(10), services.models.IntegerValidator()])),
                ('authorized_person_mobile_number', models.CharField(max_length=10, verbose_name=b'Mobile Number',
                                                                     validators=[
                                                                         django.core.validators.MinLengthValidator(10),
                                                                         services.models.IntegerValidator()])),
                ('authorized_person_address', models.CharField(max_length=255, verbose_name=b'Address')),
                ('authorized_person_email', models.EmailField(max_length=255, verbose_name=b'Email')),
                ('same_as_owner', models.BooleanField(default=False)),
                ('city', models.ForeignKey(to='services.City')),
            ],
            options={
                'verbose_name': 'Branch',
                'verbose_name_plural': 'Branches',
            },
        ),
        migrations.CreateModel(
            name='PaymentType',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('description', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('description', models.CharField(max_length=100)),
                ('type', models.IntegerField(choices=[(1, b'Product'), (2, b'Service')])),
                ('active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='ProductPrice',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('base_price', models.DecimalField(max_digits=10, decimal_places=2)),
                ('active', models.BooleanField(default=True)),
                ('product', models.ForeignKey(to='services.Product')),
                ('user_group', models.ForeignKey(blank=True, to='auth.Group', null=True)),
            ],
            options={
                'verbose_name': 'Partner Product Price',
                'verbose_name_plural': 'Partner Product Prices',
            },
        ),
        migrations.CreateModel(
            name='ProductQuantity',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('quantity', models.IntegerField()),
                ('gross_amount', models.DecimalField(verbose_name=b'Gross Amount', max_digits=30, decimal_places=2)),
                ('amount', models.DecimalField(max_digits=10, decimal_places=2)),
                ('service_tax', models.DecimalField(default=0, max_digits=30, decimal_places=2)),
                ('vat', models.DecimalField(default=0, max_digits=30, decimal_places=2)),
                ('service_tax_percentage', models.DecimalField(max_digits=4, decimal_places=2)),
                ('vat_percentage', models.DecimalField(max_digits=4, decimal_places=2)),
                ('base_price', models.DecimalField(max_digits=10, decimal_places=2)),
                ('booking', models.ForeignKey(to='services.Booking')),
                ('product', models.ForeignKey(to='services.Product')),
            ],
            options={
                'verbose_name': 'Partner Product',
                'verbose_name_plural': 'Partner Products',
            },
        ),
        migrations.CreateModel(
            name='ProductQuantityUnitDisplay',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('unit', models.IntegerField(choices=[(1, b'none'), (2, b'sq ft'), (3, b'cubic ft')])),
                ('product', models.ForeignKey(to='services.Product')),
            ],
        ),
        migrations.CreateModel(
            name='ProductSegmentPrice',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('vehicle_category', models.IntegerField(blank=True, null=True,
                                                         choices=[(1, b'Hatchback'), (2, b'Sedan'), (3, b'SUV'),
                                                                  (4, b'Tempo Traveller'), (5, b'Bus')])),
                ('base_price', models.DecimalField(max_digits=10, decimal_places=2)),
                ('active', models.BooleanField(default=True)),
                ('product', models.ForeignKey(to='services.Product')),
                ('segment', models.ForeignKey(blank=True, to='services.CustomerCategory', null=True)),
            ],
            options={
                'verbose_name': 'Customer Product Price',
                'verbose_name_plural': 'Customer Product Prices',
            },
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='StatusReason',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('description', models.CharField(max_length=100)),
                ('status', models.ForeignKey(to='services.LeadStatus')),
            ],
            options={
                'verbose_name': 'Status Reason',
                'verbose_name_plural': 'Status Reasons',
            },
        ),
        migrations.CreateModel(
            name='Tax',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('service_tax_percentage', models.DecimalField(max_digits=4, decimal_places=2)),
                ('vat_percentage', models.DecimalField(max_digits=4, decimal_places=2)),
                ('active', models.BooleanField(default=True)),
                ('end_date', models.DateField(default=django.utils.timezone.now)),
                ('product', models.ForeignKey(to='services.Product')),
            ],
            options={
                'verbose_name': 'Tax',
                'verbose_name_plural': 'Taxes',
            },
        ),
        migrations.CreateModel(
            name='ChannelPartner',
            fields=[
                ('baseuser_ptr',
                 models.OneToOneField(parent_link=True, auto_created=True, primary_key=True, serialize=False,
                                      to=settings.AUTH_USER_MODEL)),
                ('company_name', models.CharField(max_length=255)),
                ('hire_date', models.DateField(default=django.utils.timezone.now)),
                ('company_address', models.CharField(max_length=255)),
                ('number_of_staff', models.IntegerField(default=1)),
                ('number_of_branches', models.IntegerField(default=1)),
                ('number_of_products', models.IntegerField(default=1)),
                ('year_of_establishment', models.IntegerField(default=2017,
                                                              choices=[(1950, 1950), (1951, 1951), (1952, 1952),
                                                                       (1953, 1953), (1954, 1954), (1955, 1955),
                                                                       (1956, 1956), (1957, 1957), (1958, 1958),
                                                                       (1959, 1959), (1960, 1960), (1961, 1961),
                                                                       (1962, 1962), (1963, 1963), (1964, 1964),
                                                                       (1965, 1965), (1966, 1966), (1967, 1967),
                                                                       (1968, 1968), (1969, 1969), (1970, 1970),
                                                                       (1971, 1971), (1972, 1972), (1973, 1973),
                                                                       (1974, 1974), (1975, 1975), (1976, 1976),
                                                                       (1977, 1977), (1978, 1978), (1979, 1979),
                                                                       (1980, 1980), (1981, 1981), (1982, 1982),
                                                                       (1983, 1983), (1984, 1984), (1985, 1985),
                                                                       (1986, 1986), (1987, 1987), (1988, 1988),
                                                                       (1989, 1989), (1990, 1990), (1991, 1991),
                                                                       (1992, 1992), (1993, 1993), (1994, 1994),
                                                                       (1995, 1995), (1996, 1996), (1997, 1997),
                                                                       (1998, 1998), (1999, 1999), (2000, 2000),
                                                                       (2001, 2001), (2002, 2002), (2003, 2003),
                                                                       (2004, 2004), (2005, 2005), (2006, 2006),
                                                                       (2007, 2007), (2008, 2008), (2009, 2009),
                                                                       (2010, 2010), (2011, 2011), (2012, 2012),
                                                                       (2013, 2013), (2014, 2014), (2015, 2015),
                                                                       (2016, 2016), (2017, 2017)])),
                ('pin_code', models.CharField(max_length=6, validators=[django.core.validators.MinLengthValidator(6),
                                                                        services.models.IntegerValidator()])),
                ('landline', models.CharField(max_length=11, validators=[django.core.validators.MinLengthValidator(10),
                                                                         services.models.IntegerValidator()])),
                ('GSTIN', models.CharField(max_length=255)),
                ('company_pan_number',
                 models.CharField(max_length=10, validators=[django.core.validators.MinLengthValidator(10)])),
                ('is_sub_dealer', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Partner',
                'verbose_name_plural': 'Partners',
            },
            bases=('services.baseuser',),
            managers=[
                (b'objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('baseuser_ptr',
                 models.OneToOneField(parent_link=True, auto_created=True, primary_key=True, serialize=False,
                                      to=settings.AUTH_USER_MODEL)),
                ('name', models.CharField(max_length=255)),
                ('current_address', models.CharField(max_length=255)),
                ('permanent_address', models.CharField(max_length=255)),
                ('pan_number', models.CharField(max_length=10)),
                ('date_of_birth', models.DateField()),
                ('hire_date', models.DateField(default=django.utils.timezone.now)),
                ('emergency_contact_name', models.CharField(max_length=255, verbose_name=b'Name')),
                ('emergency_contact_phone', models.CharField(max_length=10, verbose_name=b'Mobile Number',
                                                             validators=[django.core.validators.MinLengthValidator(10),
                                                                         services.models.IntegerValidator()])),
                ('emergency_contact_relation', models.CharField(max_length=30, verbose_name=b'Relation')),
                ('is_admin', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Employee',
                'verbose_name_plural': 'Employees',
            },
            bases=('services.baseuser',),
            managers=[
                (b'objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='lead',
            name='createdBy',
            field=models.ForeignKey(related_name='leadCreatedBy', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='lead',
            name='more_details',
            field=models.ManyToManyField(to='services.MoreInfo', null=True, blank=True),
        ),
        migrations.AddField(
            model_name='lead',
            name='reason',
            field=models.ForeignKey(blank=True, to='services.StatusReason', null=True),
        ),
        migrations.AddField(
            model_name='lead',
            name='segments',
            field=models.ManyToManyField(to='services.ChannelPartnerSegment'),
        ),
        migrations.AddField(
            model_name='lead',
            name='status',
            field=models.ForeignKey(to='services.LeadStatus'),
        ),
        migrations.AddField(
            model_name='lead',
            name='updatedBy',
            field=models.ForeignKey(related_name='leadUpdatedBy', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='inventoryinvoice',
            name='difference_payment_type',
            field=models.ForeignKey(related_name='diff_payment', blank=True, to='services.PaymentType', null=True),
        ),
        migrations.AddField(
            model_name='inventoryinvoice',
            name='machine',
            field=models.ForeignKey(to='services.Machine'),
        ),
        migrations.AddField(
            model_name='inventoryinvoice',
            name='payment_type',
            field=models.ForeignKey(to='services.PaymentType'),
        ),
        migrations.AddField(
            model_name='customerproductquantity',
            name='product',
            field=models.ForeignKey(to='services.Product'),
        ),
        migrations.AddField(
            model_name='customerinvoice',
            name='createdBy',
            field=models.ForeignKey(related_name='customerCreatedBy', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='customerinvoice',
            name='partner_segment',
            field=models.ForeignKey(verbose_name=b'Previous service provided', to='services.ChannelPartnerSegment'),
        ),
        migrations.AddField(
            model_name='customerinvoice',
            name='payment_type',
            field=models.ForeignKey(default=4, to='services.PaymentType'),
        ),
        migrations.AddField(
            model_name='customerinvoice',
            name='segment',
            field=models.ForeignKey(verbose_name=b'Customer Category', blank=True, to='services.CustomerCategory',
                                    null=True),
        ),
        migrations.AddField(
            model_name='customerinvoice',
            name='updatedBy',
            field=models.ForeignKey(related_name='customerUpdatedBy', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='customerinvoice',
            name='user',
            field=models.ForeignKey(to='services.Customer'),
        ),
        migrations.AddField(
            model_name='city',
            name='state',
            field=models.ForeignKey(to='services.State'),
        ),
        migrations.AddField(
            model_name='booking',
            name='createdBy',
            field=models.ForeignKey(to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='booking',
            name='payment_type',
            field=models.ForeignKey(to='services.PaymentType'),
        ),
        migrations.AddField(
            model_name='booking',
            name='updatedBy',
            field=models.ForeignKey(related_name='updatedBy', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='baseuser',
            name='groups',
            field=models.ManyToManyField(related_query_name='user', related_name='user_set', to='auth.Group',
                                         blank=True,
                                         help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
                                         verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='baseuser',
            name='user_permissions',
            field=models.ManyToManyField(related_query_name='user', related_name='user_set', to='auth.Permission',
                                         blank=True, help_text='Specific permissions for this user.',
                                         verbose_name='user permissions'),
        ),
        migrations.AddField(
            model_name='partnerbranch',
            name='partner',
            field=models.ForeignKey(to='services.ChannelPartner'),
        ),
        migrations.AddField(
            model_name='partnerasowner',
            name='partner',
            field=models.ForeignKey(to='services.ChannelPartner'),
        ),
        migrations.AddField(
            model_name='lead',
            name='channelpartner',
            field=models.ForeignKey(verbose_name=b'Partner', blank=True, to='services.ChannelPartner', null=True),
        ),
        migrations.AddField(
            model_name='inventoryinvoice',
            name='createdBy',
            field=models.ForeignKey(related_name='invCreatedBy', to='services.Employee'),
        ),
        migrations.AddField(
            model_name='inventoryinvoice',
            name='partner',
            field=models.ForeignKey(to='services.ChannelPartner'),
        ),
        migrations.AddField(
            model_name='inventoryinvoice',
            name='updatedBy',
            field=models.ForeignKey(related_name='invUpdatedBy', to='services.Employee'),
        ),
        migrations.AddField(
            model_name='employee',
            name='createdBy',
            field=models.ForeignKey(related_name='createdByUser', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='channelpartner',
            name='city',
            field=models.ForeignKey(to='services.City'),
        ),
        migrations.AddField(
            model_name='channelpartner',
            name='createdBy',
            field=models.ForeignKey(related_name='cpCreatedByUser', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='channelpartner',
            name='manager',
            field=models.ForeignKey(related_name='managerEmployee', to='services.Employee'),
        ),
        migrations.AddField(
            model_name='channelpartner',
            name='segments',
            field=models.ManyToManyField(to='services.ChannelPartnerSegment'),
        ),
        migrations.AddField(
            model_name='booking',
            name='createdFor',
            field=models.ForeignKey(related_name='createdFor', to='services.ChannelPartner'),
        ),
    ]
